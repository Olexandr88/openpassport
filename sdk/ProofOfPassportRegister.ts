import { groth16 } from "snarkjs";
//import path from 'path';
import { numberToString } from "./common/src/utils/siv";
import { verifyDSCValidity } from "./utils";
import { splitToWords } from "./common/src/utils/utils";
import { k_dsc, n_dsc } from "./common/src/constants/constants";
import forge from "node-forge";

//const path_register_vkey = path.join(__dirname, '..', '..', 'circuits', 'register_sha256WithRSAEncryption_65537_vkey.json');
const vkey_register = { "protocol": "groth16", "curve": "bn128", "nPublic": 19, "vk_alpha_1": ["20491192805390485299153009773594534940189261866228447918068658471970481763042", "9383485363053290200918347156157836566562967994039712273449902621266178545958", "1"], "vk_beta_2": [["6375614351688725206403948262868962793625744043794305715222011528459656738731", "4252822878758300859123897981450591353533073413197771768651442665752259397132"], ["10505242626370262277552901082094356697409835680220590971873171140371331206856", "21847035105528745403288232691147584728191162732299865338377159692350059136679"], ["1", "0"]], "vk_gamma_2": [["10857046999023057135944570762232829481370756359578518086990519993285655852781", "11559732032986387107991004021392285783925812861821192530917403151452391805634"], ["8495653923123431417604973247489272438418190587263600148770280649306958101930", "4082367875863433681332203403145435568316851327593401208105741076214120093531"], ["1", "0"]], "vk_delta_2": [["15109500350149307323053487883093296007590490684356839614779256936022831777583", "10636099693654578685682169854848153701125336700591728989998545281360544332101"], ["19323843357229983507738572377823827049706873888452670225561178581916096045391", "6787331238819081036010725646646052304698065841480077952318629550899552705954"], ["1", "0"]], "vk_alphabeta_12": [[["2029413683389138792403550203267699914886160938906632433982220835551125967885", "21072700047562757817161031222997517981543347628379360635925549008442030252106"], ["5940354580057074848093997050200682056184807770593307860589430076672439820312", "12156638873931618554171829126792193045421052652279363021382169897324752428276"], ["7898200236362823042373859371574133993780991612861777490112507062703164551277", "7074218545237549455313236346927434013100842096812539264420499035217050630853"]], [["7077479683546002997211712695946002074877511277312570035766170199895071832130", "10093483419865920389913245021038182291233451549023025229112148274109565435465"], ["4595479056700221319381530156280926371456704509942304414423590385166031118820", "19831328484489333784475432780421641293929726139240675179672856274388269393268"], ["11934129596455521040620786944827826205713621633706285934057045369193958244500", "8037395052364110730298837004334506829870972346962140206007064471173334027475"]]], "IC": [["18530914851038160723367808093208218107073162583341603618252574310114972952645", "3491172626993358774007824199310746535787355712297118689300774219634285748447", "1"], ["12459372481602120314275733925078510007916606417959532080966725639916586176503", "3775038408492011989449252562554386051961579730575874174280148278924789506109", "1"], ["5670774023189813595558849632035831702213999749714374699034766279684106435543", "7395828230953517736149600531274140497037210558011828162381375724117795995743", "1"], ["16451739251837686551035841401877180862575441013730243816956218096871312374275", "4262802902678667557117938402728649351052017083062071275187822920555361006292", "1"], ["7525815424565938365580586119072660614216113864870765947611914652889796109347", "18745142749441677185391637105037343220075953355494387414956341359904225762388", "1"], ["13146770653850303881335290750177539565724761456961942134136903507761311057400", "5067174473745434244335634663156814997196347879313616627723153213445496072228", "1"], ["14669632772413356649494472385939231732214310557694216901612307811440440682868", "10670498547103100862651641906697926995316117294372926390634078263879646671718", "1"], ["5012787819330871823219286847404451720950019591568711779515080583974996428059", "17009708731960785878610028065980033879586220286426558906395122780703078961788", "1"], ["8392178513456813497867238448405245069465321402562562312798622649397572449352", "19839066386561013778737915005128403516764802669251119567172212296366535060087", "1"], ["13502212287987704860617768253073815501478440821005297691371839345370316637849", "14881177186278755397896284600972217927608204019364178852478075751180701398114", "1"], ["12517120460533556324180688833217370480091827870973715828027887667938321609129", "2796288928279776250976801453042732111535536569146317216635204647461874351304", "1"], ["11410907513889610502241120691495828390570109760409661245231097362052664927286", "12945190589827395317562145398458678589354704742179791878888103040038927009261", "1"], ["4419963934318847624746830272688987422741628412548324374820120687388414401862", "18495833285240849998035932202640832499144331217672721888398936150096026784688", "1"], ["5707331555787176797440864383381787551010233849497722639533388235942808839733", "12657777409077944843348076735107901045338430415403388055801785078641791743895", "1"], ["4735440059357617347953736631516711907800935346298479716925549228972613073519", "20176283609424518764892959927564998874562883755539946615829572766949262686962", "1"], ["17336700140076484005566198889742688297738240280908426575749569634076471593942", "7653609919365857156810479690026486794869093148995657263400185040364330262979", "1"], ["17739292307555157926873305601936864507271960781305587280105645952229809727903", "9928487377179409063235867872502347982617926832898701368464908508358428077884", "1"], ["3718985959259371504448727642100695646419979577871045553277824083896122606744", "16531036301892233305895268588137930439495204913629967660221691046321252321405", "1"], ["6795089020348614983689661516003180610117302591099005009516734240526696602669", "7678349002437868127622830009687668740539390909675072475881607478913908029942", "1"], ["4793097932723177802233494606966963172024734068941251510270520483805507933121", "2528096240282513877862916807331024358785501587843099663337809711290901143556", "1"]] }
export async function verifyProofs(proof: Proof, dscCertificate_stringified: any, dev_mode: boolean = false) {
    const verified_register = await groth16.verify(
        vkey_register,
        proof.publicSignals,
        proof.proof as any
    );
    const dscCertificate = forge.pki.certificateFromPem(dscCertificate_stringified);
    console.log("proof verified:" + verified_register);
    const verified_certificate = verifyDSCValidity(dscCertificate, dev_mode);
    console.log("certificate verified:" + verified_register);

    // @ts-ignore
    const dsc_modulus = BigInt(dscCertificate.publicKey.n);
    const dsc_modulus_words = splitToWords(dsc_modulus, BigInt(n_dsc), BigInt(k_dsc));
    const modulus_from_proof = getDSCModulus(proof);

    const areArraysEqual = (arr1: string[], arr2: string[]) =>
        arr1.length === arr2.length &&
        arr1.every((value, index) => value === arr2[index]);

    const verified_modulus = areArraysEqual(dsc_modulus_words, modulus_from_proof);
    console.log("modulus verified:" + verified_modulus);
    return verified_register && verified_certificate && verified_modulus;
}
export const check_merkle_root = (merkle_root: string, proof_csca: Proof) => {
    const formatted_public_signals_csca = parsePublicSignals_csca(proof_csca.publicSignals);
    return merkle_root === formatted_public_signals_csca.merkle_root;
}
export const getNullifier = (proof: Proof) => {
    const formatted_public_signals = parsePublicSignals(proof.publicSignals);
    return formatted_public_signals.nullifier;
}

export const getDSCModulus = (proof: Proof) => {
    const formatted_public_signals = parsePublicSignals(proof.publicSignals);
    return formatted_public_signals.dsc_modulus;
}

export const getSIV = (proof: Proof) => {
    const formatted_public_signals = parsePublicSignals(proof.publicSignals);
    return numberToString(BigInt(formatted_public_signals.SIV));
}

export class Proof {
    publicSignals: string[];
    proof: string[];

    constructor(publicSignals: string[], proof: string[]) {
        this.publicSignals = publicSignals;
        this.proof = proof;
    }
}
export function parsePublicSignals(publicSignals) {
    return {
        nullifier: publicSignals[0],
        dsc_modulus: publicSignals.slice(1, 18),
        SIV: publicSignals[18],
    }
}

export function parsePublicSignals_csca(publicSignals) {
    return {
        blinded_dsc_commitment: publicSignals[0],
        merkle_root: publicSignals[1]
    }
}